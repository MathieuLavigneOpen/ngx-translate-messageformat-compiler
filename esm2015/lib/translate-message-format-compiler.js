import { __decorate, __param } from "tslib";
import { Inject, Optional } from "@angular/core";
import { TranslateCompiler } from "@ngx-translate/core";
import * as MessageFormat from "messageformat";
import { defaultConfig, MESSAGE_FORMAT_CONFIG } from "./message-format-config";
/**
 * This compiler expects ICU syntax and compiles the expressions with messageformat.js
 */
let TranslateMessageFormatCompiler = class TranslateMessageFormatCompiler extends TranslateCompiler {
    constructor(config) {
        super();
        const { locales, formatters, biDiSupport, strictNumberSign } = Object.assign(Object.assign({}, defaultConfig), config);
        this.messageFormat = new MessageFormat(locales);
        if (formatters) {
            this.messageFormat.addFormatters(formatters);
        }
        if (biDiSupport) {
            this.messageFormat.setBiDiSupport(biDiSupport);
        }
        if (strictNumberSign) {
            this.messageFormat.setStrictNumberSign(strictNumberSign);
        }
    }
    compile(value, lang) {
        return this.messageFormat.compile(value, lang);
    }
    compileTranslations(translations, lang) {
        return this.messageFormat.compile(translations, lang);
    }
};
TranslateMessageFormatCompiler = __decorate([
    __param(0, Optional()),
    __param(0, Inject(MESSAGE_FORMAT_CONFIG))
], TranslateMessageFormatCompiler);
export { TranslateMessageFormatCompiler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLW1lc3NhZ2UtZm9ybWF0LWNvbXBpbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXRyYW5zbGF0ZS1tZXNzYWdlZm9ybWF0LWNvbXBpbGVyLyIsInNvdXJjZXMiOlsibGliL3RyYW5zbGF0ZS1tZXNzYWdlLWZvcm1hdC1jb21waWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxLQUFLLGFBQWEsTUFBTSxlQUFlLENBQUM7QUFFL0MsT0FBTyxFQUNMLGFBQWEsRUFDYixxQkFBcUIsRUFFdEIsTUFBTSx5QkFBeUIsQ0FBQztBQUVqQzs7R0FFRztBQUNILElBQWEsOEJBQThCLEdBQTNDLE1BQWEsOEJBQStCLFNBQVEsaUJBQWlCO0lBR25FLFlBR0UsTUFBNEI7UUFFNUIsS0FBSyxFQUFFLENBQUM7UUFFUixNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsbUNBQ3ZELGFBQWEsR0FDYixNQUFNLENBQ1YsQ0FBQztRQUVGLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFaEQsSUFBSSxVQUFVLEVBQUU7WUFDZCxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM5QztRQUNELElBQUksV0FBVyxFQUFFO1lBQ2YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDaEQ7UUFDRCxJQUFJLGdCQUFnQixFQUFFO1lBQ3BCLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUMxRDtJQUNILENBQUM7SUFFTSxPQUFPLENBQUMsS0FBYSxFQUFFLElBQVk7UUFDeEMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVNLG1CQUFtQixDQUFDLFlBQWlCLEVBQUUsSUFBWTtRQUN4RCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN4RCxDQUFDO0NBQ0YsQ0FBQTtBQW5DWSw4QkFBOEI7SUFJdEMsV0FBQSxRQUFRLEVBQUUsQ0FBQTtJQUNWLFdBQUEsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUE7R0FMckIsOEJBQThCLENBbUMxQztTQW5DWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFRyYW5zbGF0ZUNvbXBpbGVyIH0gZnJvbSBcIkBuZ3gtdHJhbnNsYXRlL2NvcmVcIjtcbmltcG9ydCAqIGFzIE1lc3NhZ2VGb3JtYXQgZnJvbSBcIm1lc3NhZ2Vmb3JtYXRcIjtcblxuaW1wb3J0IHtcbiAgZGVmYXVsdENvbmZpZyxcbiAgTUVTU0FHRV9GT1JNQVRfQ09ORklHLFxuICBNZXNzYWdlRm9ybWF0Q29uZmlnXG59IGZyb20gXCIuL21lc3NhZ2UtZm9ybWF0LWNvbmZpZ1wiO1xuXG4vKipcbiAqIFRoaXMgY29tcGlsZXIgZXhwZWN0cyBJQ1Ugc3ludGF4IGFuZCBjb21waWxlcyB0aGUgZXhwcmVzc2lvbnMgd2l0aCBtZXNzYWdlZm9ybWF0LmpzXG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGVNZXNzYWdlRm9ybWF0Q29tcGlsZXIgZXh0ZW5kcyBUcmFuc2xhdGVDb21waWxlciB7XG4gIHByaXZhdGUgbWVzc2FnZUZvcm1hdDogTWVzc2FnZUZvcm1hdDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoTUVTU0FHRV9GT1JNQVRfQ09ORklHKVxuICAgIGNvbmZpZz86IE1lc3NhZ2VGb3JtYXRDb25maWdcbiAgKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGNvbnN0IHsgbG9jYWxlcywgZm9ybWF0dGVycywgYmlEaVN1cHBvcnQsIHN0cmljdE51bWJlclNpZ24gfSA9IHtcbiAgICAgIC4uLmRlZmF1bHRDb25maWcsXG4gICAgICAuLi5jb25maWdcbiAgICB9O1xuXG4gICAgdGhpcy5tZXNzYWdlRm9ybWF0ID0gbmV3IE1lc3NhZ2VGb3JtYXQobG9jYWxlcyk7XG5cbiAgICBpZiAoZm9ybWF0dGVycykge1xuICAgICAgdGhpcy5tZXNzYWdlRm9ybWF0LmFkZEZvcm1hdHRlcnMoZm9ybWF0dGVycyk7XG4gICAgfVxuICAgIGlmIChiaURpU3VwcG9ydCkge1xuICAgICAgdGhpcy5tZXNzYWdlRm9ybWF0LnNldEJpRGlTdXBwb3J0KGJpRGlTdXBwb3J0KTtcbiAgICB9XG4gICAgaWYgKHN0cmljdE51bWJlclNpZ24pIHtcbiAgICAgIHRoaXMubWVzc2FnZUZvcm1hdC5zZXRTdHJpY3ROdW1iZXJTaWduKHN0cmljdE51bWJlclNpZ24pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBjb21waWxlKHZhbHVlOiBzdHJpbmcsIGxhbmc6IHN0cmluZyk6IChwYXJhbXM6IGFueSkgPT4gc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlRm9ybWF0LmNvbXBpbGUodmFsdWUsIGxhbmcpO1xuICB9XG5cbiAgcHVibGljIGNvbXBpbGVUcmFuc2xhdGlvbnModHJhbnNsYXRpb25zOiBhbnksIGxhbmc6IHN0cmluZyk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUZvcm1hdC5jb21waWxlKHRyYW5zbGF0aW9ucywgbGFuZyk7XG4gIH1cbn1cbiJdfQ==